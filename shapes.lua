--[[
Animo metadata
Generated by Animo: Lanica's Flash SWF to sprite sheet exporter (c) Lanica, Inc. 2012, (c) Loqheart 2012 
version 1.0.6
target Corona SDK (Graphics 2.0)
extension lua
exportName shapes
exportPath file:///C:/_Code/_scraps/ExtendingAnimo
sheetSize 512x256
msFactor 1000
sources 3
name; url; referencePoint; startFrame; totalFrames; frameRate; topLeft; bottomRight; sourceRect; loopParam; includeReverse; rasterize
MyCircles; MyCircles.swf; (x=0, y=0); 1; 4; 30; (x=0, y=0); (x=120, y=120); (x=-2, y=-2, w=124, h=124); 1; false; false
MySquares; MySquares.swf; (x=0, y=0); 1; 4; 30; (x=0, y=0); (x=120, y=120); (x=-2, y=-2, w=124, h=124); 1; false; false
MyTestShapes; MyTestShapes.swf; (x=0, y=0); 1; 9; 30; (x=-644, y=-139); (x=27, y=278); (x=-646, y=-141, w=675, h=421); 1; false; false
assetShapes 0
]]

-- Extension for Animo template!
-- You cannot begin a line with something like the assets or endAssets tab.. it will not be recognized! Add a tab!
-- Elliot Pace (EpaceGames.com) elliotlp@gmail.com

local returnedData = {}

local allSprites = {}

local offsets = {}
offsets["MyCircles"] = {
	{offsetx = -2 + 0, offsety = -2 + 0},
	{offsetx = -2 + 60, offsety = -2 + 0},
	{offsetx = -2 + 0, offsety = -2 + 60},
	{offsetx = -2 + 60, offsety = -2 + 60},
}
offsets["MySquares"] = {
	{offsetx = -2 + 0, offsety = -2 + 0},
	{offsetx = -2 + 60, offsety = -2 + 0},
	{offsetx = -2 + 0, offsety = -2 + 60},
	{offsetx = -2 + 60, offsety = -2 + 60},
}
offsets["MyTestShapes"] = {
	{offsetx = -646 + 626, offsety = -141 + 32},
	{offsetx = -646 + 639, offsety = -141 + 135},
	{offsetx = -646 + 606, offsety = -141 + 0},
	{offsetx = -646 + 0, offsety = -141 + 244},
	{offsetx = -646 + 0, offsety = -141 + 279},
	{offsetx = -646 + 0, offsety = -141 + 303},
	{offsetx = -646 + 0, offsety = -141 + 329},
	{offsetx = -646 + 0, offsety = -141 + 357},
	{offsetx = -646 + 0, offsety = -141 + 385},
}
	
local options = {
	frames = {
		-- frames for MyCircles
		{
            x = 0,
            y = 111,
            width = 64,
            height = 64,
        },
		{
            x = 278,
            y = 0,
            width = 64,
            height = 64,
        },
		{
            x = 86,
            y = 0,
            width = 64,
            height = 64,
        },
		{
            x = 150,
            y = 0,
            width = 64,
            height = 64,
        },
		-- frames for MySquares
		{
            x = 214,
            y = 0,
            width = 64,
            height = 64,
        },
		{
            x = 22,
            y = 0,
            width = 64,
            height = 64,
        },
		{
            x = 342,
            y = 0,
            width = 64,
            height = 64,
        },
		{
            x = 406,
            y = 0,
            width = 64,
            height = 64,
        },
		-- frames for MyTestShapes
		{
            x = 0,
            y = 0,
            width = 22,
            height = 111,
        },
		{
            x = 470,
            y = 0,
            width = 36,
            height = 36,
        },
		{
            x = 64,
            y = 111,
            width = 36,
            height = 36,
        },
		{
            x = 100,
            y = 111,
            width = 37,
            height = 36,
        },
		{
            x = 137,
            y = 111,
            width = 37,
            height = 36,
        },
		{
            x = 174,
            y = 111,
            width = 37,
            height = 36,
        },
		{
            x = 211,
            y = 111,
            width = 37,
            height = 36,
        },
		{
            x = 248,
            y = 111,
            width = 37,
            height = 36,
        },
		{
            x = 285,
            y = 111,
            width = 37,
            height = 36,
        },
	},
}

returnedData.sequences = {}
returnedData.sequences["MyCircles"] = {
	start=1,
	count=4,
	loopCount=1,
	loopDirection = "forward",
	time = 1000*4/30,
}
returnedData.sequences["MySquares"] = {
	start=5,
	count=4,
	loopCount=1,
	loopDirection = "forward",
	time = 1000*4/30,
}
returnedData.sequences["MyTestShapes"] = {
	start=9,
	count=9,
	loopCount=1,
	loopDirection = "forward",
	time = 1000*9/30,
}
	
local sheet = nil

local function load()
	if not sheet then
		sheet = graphics.newImageSheet("shapes.png", options)
	end
end

local function destroy()
	if sheet then
		--sheet:dispose()
		sheet = nil
	end
end

local function setSpriteFrame(self, frame)
	self.frame = frame
	self[1]:setFrame(frame)
	self[1].x = offsets[self.name][frame].offsetx
	self[1].y = offsets[self.name][frame].offsety
end

local function sprite_gotoAndStop(self, frame)
	self.playing = false
	self.oneFrameDelay = false
	setSpriteFrame(self, frame)
end

local function sprite_gotoAndPlay(self, frame, loop)
	self.playing = true
	self.loop = loop
	if self.loop == nil then
		self.loop = true
	end
	self.oneFrameDelay = true
	setSpriteFrame(self, frame)
end

local function sprite_play(self, loop)
	self.playing = true
	self.loop = loop
end

local function sprite_stop(self)
	self.playing = false
end

local function sprite_tick(self)
	if self.playing and not self.oneFrameDelay then
		self.frame = self.frame + 1
		if self.frame > self.numFrames then
			if self.loop then
				self.frame = 1
			else
				self.frame = self.numFrames
			end
		end
		setSpriteFrame(self, self.frame)
	end
	self.oneFrameDelay = false
end

local function sprite_overridenRemoveSelf(self)
	if not self.hasAlreadyRemovedSelfAsOverriden then
		for i=1,#allSprites do
			if allSprites[i] == self then
				table.remove(allSprites, i)
				break
			end
		end
		self.hasAlreadyRemovedSelfAsOverriden = true
		self:removeSelfOld()
	end
end

local function createSprite(self, name, frame)	
	local newSpriteGroup = display.newGroup()
	newSpriteGroup.name = name
	newSpriteGroup.gotoAndStop = sprite_gotoAndStop
	newSpriteGroup.gotoAndPlay = sprite_gotoAndPlay
	-- this is ticked manually now!
	--newSpriteGroup.tick = sprite_tick
	table.insert(allSprites, newSpriteGroup)
	newSpriteGroup.play = sprite_play
	newSpriteGroup.stop = sprite_stop
	newSpriteGroup.numFrames = #offsets[name]
	newSpriteGroup.frame = 1
	newSpriteGroup.hasAlreadyRemovedSelfAsOverriden = false
	-- override the removeSelf, so we know when to remove from the local allSprites table
	newSpriteGroup.removeSelfOld = newSpriteGroup.removeSelf
	newSpriteGroup.removeSelf = sprite_overridenRemoveSelf
	-- ensures calling gotoAndPlay() shows the first frame, assuming tick() is called at the end of an Actor's tick
	newSpriteGroup.oneFrameDelay = false
	
	local newSprite = display.newSprite(sheet, returnedData.sequences[name])
	newSprite.anchorX = 0
	newSprite.anchorY = 0
	newSprite.playing = false
	newSprite.loop = false
	newSpriteGroup:insert(newSprite)
	
	if frame == nil then
		newSpriteGroup:gotoAndPlay(1)
	else
		newSpriteGroup:gotoAndStop(frame)
	end
	
	return newSpriteGroup
end

local function tick(event)
	for i=1,#allSprites do
		sprite_tick(allSprites[i])
	end
end
Runtime:addEventListener("enterFrame", tick)

returnedData.load = load
returnedData.destroy = destroy
returnedData.createSprite = createSprite

return returnedData


























